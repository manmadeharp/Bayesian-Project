This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-06T09:48:45.846Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
Distributions.py
MALA.py
MetropolisHastings.py
PRNG.py

================================================================
Repository Files
================================================================

================
File: Distributions.py
================
import scipy as sp
import numpy as np
from typing import Tuple, Union
from .PRNG import RNG, SEED


class Proposal:
    def __init__(
        self, proposal_distribution: sp.stats.rv_continuous, scale: np.ndarray
    ):
        self.proposal_distribution = proposal_distribution
        self.proposal = RNG(SEED, proposal_distribution)
        if np.isscalar(scale):
            self.beta = np.sqrt(scale)
        else:
            self.beta = sp.stats.Covariance.from_cholesky(scale)  # L*x ~ N(0, Sigma)

    def propose(self, current: np.ndarray):
        return self.proposal(current, self.beta)

    def proposal_log_density(
        self,
        state: np.ndarray,
        loc: np.ndarray,
    ) -> np.float64:
        return self.proposal_distribution.logpdf(state, loc, self.beta)


# Test Proposal
# test = Proposal(sp.stats.multivariate_normal, np.array([[1, 2], [2, 1]]))
# print(test.propose(np.array([1.0, 12])))
# print(test.proposal_log_density(np.array([1.0, 12]), np.array([1.0, 12])))


class TargetDistribution:
    def __init__(
        self,
        prior: sp.stats.rv_continuous,
        likelihood: sp.stats.rv_continuous,
        data,
        sigma: float,
    ):
        self.prior = prior
        self.likelihood = likelihood
        # likelihood
        self.data = data
        self.data_sigma = sigma

    def log_likelihood(self, x: np.ndarray) -> np.float64:
        """
        Likelihood of our data given the parameters x.
        I.E the distribution of the data given the parameters x.
        :param x:
        :return:
        """
        return np.sum(self.likelihood.logpdf(self.data, x, self.data_sigma))

    def log_prior(self, x: np.ndarray) -> np.float64:
        return self.prior.logpdf(x)

================
File: MALA.py
================
import numpy as np
import scipy as sp
from .MetropolisHastings import MetropolisHastings
from .Distributions import Proposal, TargetDistribution

## Metropolis Adjusted Langevin Algorithm WIP

class GradientComputer:
    """
    Handles computation of gradients for the target distribution.
    Can use either numerical or analytical gradients.
    """
    def __init__(self, target: TargetDistribution, eps: float = 1e-8):
        self.target = target
        self.eps = eps
        
    def numerical_gradient(self, x: np.ndarray) -> np.ndarray:
        """Compute gradient using finite differences"""
        grad = np.zeros_like(x)
        for i in range(len(x)):
            x_plus = x.copy()
            x_plus[i] += self.eps
            x_minus = x.copy()
            x_minus[i] -= self.eps
            
            # Compute gradient of log posterior
            grad[i] = (
                (self.target.log_prior(x_plus) + 
                 self.target.log_likelihood(x_plus) -
                 self.target.log_prior(x_minus) - 
                 self.target.log_likelihood(x_minus)) / (2 * self.eps)
            )
        return grad

class LangevinProposal(Proposal):
    """
    Handles Langevin dynamics-based proposals.
    """
    def __init__(
        self,
        proposal_distribution: sp.stats.rv_continuous,
        step_size: float,
        gradient_computer: GradientComputer
    ):
        super().__init__(proposal_distribution, np.sqrt(step_size))
        self.step_size = step_size
        self.gradient_computer = gradient_computer
        
    def propose(self, current: np.ndarray) -> np.ndarray:
        """Generate proposal using Langevin dynamics"""
        # Compute gradient-based drift
        gradient = self.gradient_computer.numerical_gradient(current)
        mean = current + 0.5 * self.step_size * gradient
        
        # Add noise scaled by sqrt(step_size)
        noise = np.sqrt(self.step_size) * self.proposal(
            np.zeros_like(current),
            np.eye(len(current))
        )
        return mean + noise
        
    def proposal_log_density(self, proposed: np.ndarray, current: np.ndarray) -> np.float64:
        """Compute log density of the Langevin proposal"""
        # Compute means for forward and backward proposals
        forward_gradient = self.gradient_computer.numerical_gradient(current)
        forward_mean = current + 0.5 * self.step_size * forward_gradient
        
        # Use parent class proposal distribution for density computation
        return self.proposal_distribution.logpdf(
            proposed,
            forward_mean,
            np.sqrt(self.step_size) * np.eye(len(current))
        )

class MALA(MetropolisHastings):
    """
    Metropolis-Adjusted Langevin Algorithm
    Uses gradient information for intelligent proposals
    """
    def __init__(
        self,
        target: TargetDistribution,
        step_size: float,
        initial_state: np.ndarray,
    ):
        # Set up gradient computation
        self.gradient_computer = GradientComputer(target)
        
        # Set up Langevin proposal mechanism
        proposal = LangevinProposal(
            sp.stats.multivariate_normal,
            step_size,
            self.gradient_computer
        )
        
        # Initialize parent class
        super().__init__(target, proposal, initial_state)
        
    def acceptance_ratio(self, current: np.ndarray, proposed: np.ndarray) -> np.float64:
        """
        Compute acceptance ratio accounting for asymmetric proposals
        """
        # Standard MH ratio terms
        prior_ratio = (self.target_distribution.log_prior(proposed) - 
                      self.target_distribution.log_prior(current))
        likelihood_ratio = (self.target_distribution.log_likelihood(proposed) - 
                          self.target_distribution.log_likelihood(current))
        
        # Proposal ratio (forward vs backward proposals)
        proposal_ratio = (
            self.proposal_distribution.proposal_log_density(current, proposed) -
            self.proposal_distribution.proposal_log_density(proposed, current)
        )
        
        return min(0.0, prior_ratio + likelihood_ratio + proposal_ratio)

# Example usage with diagnostics
def run_mala_with_diagnostics(
    target: TargetDistribution,
    initial_state: np.ndarray,
    step_size: float,
    n_iterations: int
) -> dict:
    """
    Run MALA algorithm and return diagnostics
    """
    # Initialize and run sampler
    sampler = MALA(target, step_size, initial_state)
    sampler(n_iterations)
    
    # Compute diagnostics
    acceptance_rate = sampler.acceptance_count / n_iterations
    
    return {
        'chain': sampler.chain[:sampler._index],
        'acceptance_rate': acceptance_rate,
        'step_size': step_size
    }

================
File: MetropolisHastings.py
================
import scipy as sp
import numpy as np
from .PRNG import SEED
from .Distributions import Proposal, TargetDistribution

# Default Values
# - Seed Value


class MetropolisHastings:
    def __init__(
        self,
        target_distribution: TargetDistribution,
        proposal_distribution: Proposal,
        initialstate,
    ):
        """
        Initialize the Metropolis-Hastings algorithm.
        :param target_distribution:
        :param proposal_distribution:
        :param initialstate:
        """
        self.target_distribution = target_distribution
        self.proposal_distribution = proposal_distribution

        self.max_size = 10000  # Or some reasonable default
        self.chain = np.empty((self.max_size, len(initialstate)))
        self.chain[0] = initialstate
        self._index = 1
        self.uniform_rng = np.random.default_rng(
            seed=SEED
        )  # Using Philox for Reproducability

    def acceptance_ratio(self, current: np.ndarray, proposed: np.ndarray) -> np.float64:
        """
        Acceptance ratio for the Metropolis-Hastings algorithm.
        :param current: Current state of the chain.
        :param proposed: Proposed state of the chain.
        :return: Acceptance ratio.
        """

        prior_ratio = self.target_distribution.log_prior(
            proposed
        ) - self.target_distribution.log_prior(current)
        likelihood_ratio = self.target_distribution.log_likelihood(
            proposed
        ) - self.target_distribution.log_likelihood(current)
        transition_ratio = self.proposal_distribution.proposal_log_density(
            current, proposed
        ) - self.proposal_distribution.proposal_log_density(
            proposed, current
        )  # Previous given new over new given previous

        log_ratio = prior_ratio + likelihood_ratio + transition_ratio
        return min(np.float64(0), log_ratio)

    def __call__(self, n: int):
        """
        Run the Metropolis-Hastings algorithm for n iterations.
        :param n:
        """
        # Resize if needed
        if self._index + n > self.max_size:
            new_max = max(self.max_size * 2, self._index + n)
            new_chain = np.empty((new_max, self.chain.shape[1]))
            new_chain[: self._index] = self.chain[: self._index]
            self.chain = new_chain
            self.max_size = new_max

        for i in range(n):
            current = self.chain[self._index - 1]
            proposed = self.proposal_distribution.propose(current)
            if np.log(self.uniform_rng.uniform()) < self.acceptance_ratio(
                current, proposed
            ):
                self.chain[self._index] = proposed
            else:
                self.chain[self._index] = current
            self._index += 1


## WIP
class AdaptiveMetropolisHastings(MetropolisHastings):
    def __init__(
        self,
        target: TargetDistribution,
        proposal: Proposal,
        initial_value,
        adaptation_interval: int = 100,
        target_acceptance: float = 0.234,
        adaptation_scale: float = 2.4,
    ):
        super().__init__(target, proposal, initial_value)
        self.acceptance_count = 0
        self.adaptation_interval = adaptation_interval
        self.target_acceptance = target_acceptance
        self.adaptation_scale = adaptation_scale * 2 / initial_value.size

    def update_proposal(self):
        """Update proposal covariance based on chain history"""
        chain_segment = self.chain[: self._index]

        cov = np.cov(chain_segment.T)
        scaled_cov = (
            self.acceptance_count / self.chain.size
        ) * self.adaptation_scale * cov + np.eye(cov.shape[0]) * 1e-6
        self.proposal_distribution.beta = sp.stats.Covariance.from_cholesky(scaled_cov)

    def __call__(self, n: int):
        """Run adaptive MCMC"""
        # Resize if needed
        if self._index + n > self.max_size:
            new_max = max(self.max_size * 2, self._index + n)
            new_chain = np.empty((new_max, self.chain.shape[1]))
            new_chain[: self._index] = self.chain[: self._index]
            self.chain = new_chain
            self.max_size = new_max

        for i in range(n):
            current = self.chain[self._index - 1]
            proposed = self.proposal_distribution.propose(current)
            if np.log(self.uniform_rng.uniform()) < self.acceptance_ratio(
                current, proposed
            ):
                self.chain[self._index] = proposed
                self.acceptance_count += 1
            else:
                self.chain[self._index] = current

            if (
                self._index % self.adaptation_interval == 0
            ):  # Adapt every 100 iterations
                self.update_proposal()

            self._index += 1

================
File: PRNG.py
================
from numpy.random import SeedSequence, Generator, Philox
from scipy.stats import rv_continuous
from typing import Optional

# Static Values
SEED = 1000


# Parent RNG class
class RNG:
    def __init__(self, seed: Optional[int], distribution: rv_continuous):
        self.ss = SeedSequence(seed)
        self.rg = Generator(Philox(self.ss))  # Use Philox for parallel applications
        self.rng_distribution = distribution

    def __call__(self, loc, scale, size: Optional[int] = None, *args, **kwargs):
        return self.rng_distribution.rvs(
            loc, scale, size=size, random_state=self.rg, *args, **kwargs
        )
